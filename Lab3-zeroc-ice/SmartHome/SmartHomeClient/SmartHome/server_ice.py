# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `server.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'DeviceNotFoundException' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceNotFoundException = Ice.createTempClass()
    class DeviceNotFoundException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceNotFoundException'

    _M_SmartHome._t_DeviceNotFoundException = IcePy.defineException('::SmartHome::DeviceNotFoundException', DeviceNotFoundException, (), False, None, ())
    DeviceNotFoundException._ice_type = _M_SmartHome._t_DeviceNotFoundException

    _M_SmartHome.DeviceNotFoundException = DeviceNotFoundException
    del DeviceNotFoundException

if 'DeviceIsOffException' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceIsOffException = Ice.createTempClass()
    class DeviceIsOffException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceIsOffException'

    _M_SmartHome._t_DeviceIsOffException = IcePy.defineException('::SmartHome::DeviceIsOffException', DeviceIsOffException, (), False, None, ())
    DeviceIsOffException._ice_type = _M_SmartHome._t_DeviceIsOffException

    _M_SmartHome.DeviceIsOffException = DeviceIsOffException
    del DeviceIsOffException

if 'ModeNotChangeException' not in _M_SmartHome.__dict__:
    _M_SmartHome.ModeNotChangeException = Ice.createTempClass()
    class ModeNotChangeException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::ModeNotChangeException'

    _M_SmartHome._t_ModeNotChangeException = IcePy.defineException('::SmartHome::ModeNotChangeException', ModeNotChangeException, (), False, None, ())
    ModeNotChangeException._ice_type = _M_SmartHome._t_ModeNotChangeException

    _M_SmartHome.ModeNotChangeException = ModeNotChangeException
    del ModeNotChangeException

if 'IndexOutOfRangeException' not in _M_SmartHome.__dict__:
    _M_SmartHome.IndexOutOfRangeException = Ice.createTempClass()
    class IndexOutOfRangeException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::IndexOutOfRangeException'

    _M_SmartHome._t_IndexOutOfRangeException = IcePy.defineException('::SmartHome::IndexOutOfRangeException', IndexOutOfRangeException, (), False, None, ())
    IndexOutOfRangeException._ice_type = _M_SmartHome._t_IndexOutOfRangeException

    _M_SmartHome.IndexOutOfRangeException = IndexOutOfRangeException
    del IndexOutOfRangeException

if 'Mode' not in _M_SmartHome.__dict__:
    _M_SmartHome.Mode = Ice.createTempClass()
    class Mode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Mode.ON = Mode("ON", 0)
    Mode.OFF = Mode("OFF", 1)
    Mode._enumerators = { 0:Mode.ON, 1:Mode.OFF }

    _M_SmartHome._t_Mode = IcePy.defineEnum('::SmartHome::Mode', Mode, (), Mode._enumerators)

    _M_SmartHome.Mode = Mode
    del Mode

_M_SmartHome._t_Device = IcePy.defineValue('::SmartHome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getMode(self, context=None):
            return _M_SmartHome.Device._op_getMode.invoke(self, ((), context))

        def getModeAsync(self, context=None):
            return _M_SmartHome.Device._op_getMode.invokeAsync(self, ((), context))

        def begin_getMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_getMode.begin(self, ((), _response, _ex, _sent, context))

        def end_getMode(self, _r):
            return _M_SmartHome.Device._op_getMode.end(self, _r)

        def setMode(self, mode, context=None):
            return _M_SmartHome.Device._op_setMode.invoke(self, ((mode, ), context))

        def setModeAsync(self, mode, context=None):
            return _M_SmartHome.Device._op_setMode.invokeAsync(self, ((mode, ), context))

        def begin_setMode(self, mode, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_setMode.begin(self, ((mode, ), _response, _ex, _sent, context))

        def end_setMode(self, _r):
            return _M_SmartHome.Device._op_setMode.end(self, _r)

        def isDeviceTurnOFF(self, context=None):
            return _M_SmartHome.Device._op_isDeviceTurnOFF.invoke(self, ((), context))

        def isDeviceTurnOFFAsync(self, context=None):
            return _M_SmartHome.Device._op_isDeviceTurnOFF.invokeAsync(self, ((), context))

        def begin_isDeviceTurnOFF(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_isDeviceTurnOFF.begin(self, ((), _response, _ex, _sent, context))

        def end_isDeviceTurnOFF(self, _r):
            return _M_SmartHome.Device._op_isDeviceTurnOFF.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DevicePrx.ice_checkedCast(proxy, '::SmartHome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'
    _M_SmartHome._t_DevicePrx = IcePy.defineProxy('::SmartHome::Device', DevicePrx)

    _M_SmartHome.DevicePrx = DevicePrx
    del DevicePrx

    _M_SmartHome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Device'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'

        def getMode(self, current=None):
            raise NotImplementedError("servant method 'getMode' not implemented")

        def setMode(self, mode, current=None):
            raise NotImplementedError("servant method 'setMode' not implemented")

        def isDeviceTurnOFF(self, current=None):
            raise NotImplementedError("servant method 'isDeviceTurnOFF' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceDisp = IcePy.defineClass('::SmartHome::Device', Device, (), None, ())
    Device._ice_type = _M_SmartHome._t_DeviceDisp

    Device._op_getMode = IcePy.Operation('getMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Mode, False, 0), ())
    Device._op_setMode = IcePy.Operation('setMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_Mode, False, 0),), (), ((), _M_SmartHome._t_Mode, False, 0), (_M_SmartHome._t_ModeNotChangeException,))
    Device._op_isDeviceTurnOFF = IcePy.Operation('isDeviceTurnOFF', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_SmartHome.Device = Device
    del Device

if 'BrightnessOutOfRangeException' not in _M_SmartHome.__dict__:
    _M_SmartHome.BrightnessOutOfRangeException = Ice.createTempClass()
    class BrightnessOutOfRangeException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::BrightnessOutOfRangeException'

    _M_SmartHome._t_BrightnessOutOfRangeException = IcePy.defineException('::SmartHome::BrightnessOutOfRangeException', BrightnessOutOfRangeException, (), False, None, ())
    BrightnessOutOfRangeException._ice_type = _M_SmartHome._t_BrightnessOutOfRangeException

    _M_SmartHome.BrightnessOutOfRangeException = BrightnessOutOfRangeException
    del BrightnessOutOfRangeException

if 'LedColour' not in _M_SmartHome.__dict__:
    _M_SmartHome.LedColour = Ice.createTempClass()
    class LedColour(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LedColour.WHITE = LedColour("WHITE", 0)
    LedColour.YELLOW = LedColour("YELLOW", 1)
    LedColour.RED = LedColour("RED", 2)
    LedColour.GREEN = LedColour("GREEN", 3)
    LedColour.BLUE = LedColour("BLUE", 4)
    LedColour.ORANGE = LedColour("ORANGE", 5)
    LedColour.PINK = LedColour("PINK", 6)
    LedColour._enumerators = { 0:LedColour.WHITE, 1:LedColour.YELLOW, 2:LedColour.RED, 3:LedColour.GREEN, 4:LedColour.BLUE, 5:LedColour.ORANGE, 6:LedColour.PINK }

    _M_SmartHome._t_LedColour = IcePy.defineEnum('::SmartHome::LedColour', LedColour, (), LedColour._enumerators)

    _M_SmartHome.LedColour = LedColour
    del LedColour

_M_SmartHome._t_Lamp = IcePy.defineValue('::SmartHome::Lamp', Ice.Value, -1, (), False, True, None, ())

if 'LampPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LampPrx = Ice.createTempClass()
    class LampPrx(_M_SmartHome.DevicePrx):

        def getBrightness(self, context=None):
            return _M_SmartHome.Lamp._op_getBrightness.invoke(self, ((), context))

        def getBrightnessAsync(self, context=None):
            return _M_SmartHome.Lamp._op_getBrightness.invokeAsync(self, ((), context))

        def begin_getBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lamp._op_getBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getBrightness(self, _r):
            return _M_SmartHome.Lamp._op_getBrightness.end(self, _r)

        def getColour(self, context=None):
            return _M_SmartHome.Lamp._op_getColour.invoke(self, ((), context))

        def getColourAsync(self, context=None):
            return _M_SmartHome.Lamp._op_getColour.invokeAsync(self, ((), context))

        def begin_getColour(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lamp._op_getColour.begin(self, ((), _response, _ex, _sent, context))

        def end_getColour(self, _r):
            return _M_SmartHome.Lamp._op_getColour.end(self, _r)

        def setBrightness(self, brightnessPercentage, context=None):
            return _M_SmartHome.Lamp._op_setBrightness.invoke(self, ((brightnessPercentage, ), context))

        def setBrightnessAsync(self, brightnessPercentage, context=None):
            return _M_SmartHome.Lamp._op_setBrightness.invokeAsync(self, ((brightnessPercentage, ), context))

        def begin_setBrightness(self, brightnessPercentage, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lamp._op_setBrightness.begin(self, ((brightnessPercentage, ), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_SmartHome.Lamp._op_setBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LampPrx.ice_checkedCast(proxy, '::SmartHome::Lamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Lamp'
    _M_SmartHome._t_LampPrx = IcePy.defineProxy('::SmartHome::Lamp', LampPrx)

    _M_SmartHome.LampPrx = LampPrx
    del LampPrx

    _M_SmartHome.Lamp = Ice.createTempClass()
    class Lamp(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Lamp')

        def ice_id(self, current=None):
            return '::SmartHome::Lamp'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Lamp'

        def getBrightness(self, current=None):
            raise NotImplementedError("servant method 'getBrightness' not implemented")

        def getColour(self, current=None):
            raise NotImplementedError("servant method 'getColour' not implemented")

        def setBrightness(self, brightnessPercentage, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LampDisp)

        __repr__ = __str__

    _M_SmartHome._t_LampDisp = IcePy.defineClass('::SmartHome::Lamp', Lamp, (), None, (_M_SmartHome._t_DeviceDisp,))
    Lamp._ice_type = _M_SmartHome._t_LampDisp

    Lamp._op_getBrightness = IcePy.Operation('getBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Lamp._op_getColour = IcePy.Operation('getColour', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_LedColour, False, 0), ())
    Lamp._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_SmartHome._t_BrightnessOutOfRangeException, _M_SmartHome._t_DeviceIsOffException))

    _M_SmartHome.Lamp = Lamp
    del Lamp

_M_SmartHome._t_LedLamp = IcePy.defineValue('::SmartHome::LedLamp', Ice.Value, -1, (), False, True, None, ())

if 'LedLampPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LedLampPrx = Ice.createTempClass()
    class LedLampPrx(_M_SmartHome.LampPrx):

        def setLedColour(self, colour, context=None):
            return _M_SmartHome.LedLamp._op_setLedColour.invoke(self, ((colour, ), context))

        def setLedColourAsync(self, colour, context=None):
            return _M_SmartHome.LedLamp._op_setLedColour.invokeAsync(self, ((colour, ), context))

        def begin_setLedColour(self, colour, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LedLamp._op_setLedColour.begin(self, ((colour, ), _response, _ex, _sent, context))

        def end_setLedColour(self, _r):
            return _M_SmartHome.LedLamp._op_setLedColour.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LedLampPrx.ice_checkedCast(proxy, '::SmartHome::LedLamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LedLampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LedLamp'
    _M_SmartHome._t_LedLampPrx = IcePy.defineProxy('::SmartHome::LedLamp', LedLampPrx)

    _M_SmartHome.LedLampPrx = LedLampPrx
    del LedLampPrx

    _M_SmartHome.LedLamp = Ice.createTempClass()
    class LedLamp(_M_SmartHome.Lamp):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Lamp', '::SmartHome::LedLamp')

        def ice_id(self, current=None):
            return '::SmartHome::LedLamp'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LedLamp'

        def setLedColour(self, colour, current=None):
            raise NotImplementedError("servant method 'setLedColour' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LedLampDisp)

        __repr__ = __str__

    _M_SmartHome._t_LedLampDisp = IcePy.defineClass('::SmartHome::LedLamp', LedLamp, (), None, (_M_SmartHome._t_LampDisp,))
    LedLamp._ice_type = _M_SmartHome._t_LedLampDisp

    LedLamp._op_setLedColour = IcePy.Operation('setLedColour', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_LedColour, False, 0),), (), ((), _M_SmartHome._t_LedColour, False, 0), (_M_SmartHome._t_DeviceIsOffException,))

    _M_SmartHome.LedLamp = LedLamp
    del LedLamp

if 'TemperatureOutOfSupportedScaleException' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureOutOfSupportedScaleException = Ice.createTempClass()
    class TemperatureOutOfSupportedScaleException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::TemperatureOutOfSupportedScaleException'

    _M_SmartHome._t_TemperatureOutOfSupportedScaleException = IcePy.defineException('::SmartHome::TemperatureOutOfSupportedScaleException', TemperatureOutOfSupportedScaleException, (), False, None, ())
    TemperatureOutOfSupportedScaleException._ice_type = _M_SmartHome._t_TemperatureOutOfSupportedScaleException

    _M_SmartHome.TemperatureOutOfSupportedScaleException = TemperatureOutOfSupportedScaleException
    del TemperatureOutOfSupportedScaleException

if 'TemperatureOutOfLimitException' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureOutOfLimitException = Ice.createTempClass()
    class TemperatureOutOfLimitException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::TemperatureOutOfLimitException'

    _M_SmartHome._t_TemperatureOutOfLimitException = IcePy.defineException('::SmartHome::TemperatureOutOfLimitException', TemperatureOutOfLimitException, (), False, None, ())
    TemperatureOutOfLimitException._ice_type = _M_SmartHome._t_TemperatureOutOfLimitException

    _M_SmartHome.TemperatureOutOfLimitException = TemperatureOutOfLimitException
    del TemperatureOutOfLimitException

if 'TemperatureLowerLimitIsGreaterThanUpperLimitException' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureLowerLimitIsGreaterThanUpperLimitException = Ice.createTempClass()
    class TemperatureLowerLimitIsGreaterThanUpperLimitException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::TemperatureLowerLimitIsGreaterThanUpperLimitException'

    _M_SmartHome._t_TemperatureLowerLimitIsGreaterThanUpperLimitException = IcePy.defineException('::SmartHome::TemperatureLowerLimitIsGreaterThanUpperLimitException', TemperatureLowerLimitIsGreaterThanUpperLimitException, (), False, None, ())
    TemperatureLowerLimitIsGreaterThanUpperLimitException._ice_type = _M_SmartHome._t_TemperatureLowerLimitIsGreaterThanUpperLimitException

    _M_SmartHome.TemperatureLowerLimitIsGreaterThanUpperLimitException = TemperatureLowerLimitIsGreaterThanUpperLimitException
    del TemperatureLowerLimitIsGreaterThanUpperLimitException

if 'TemperatureLimits' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureLimits = Ice.createTempClass()
    class TemperatureLimits(object):
        def __init__(self, lowerLimit=0.0, upperLimit=0.0):
            self.lowerLimit = lowerLimit
            self.upperLimit = upperLimit

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.TemperatureLimits):
                return NotImplemented
            else:
                if self.lowerLimit != other.lowerLimit:
                    return False
                if self.upperLimit != other.upperLimit:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TemperatureLimits)

        __repr__ = __str__

    _M_SmartHome._t_TemperatureLimits = IcePy.defineStruct('::SmartHome::TemperatureLimits', TemperatureLimits, (), (
        ('lowerLimit', (), IcePy._t_float),
        ('upperLimit', (), IcePy._t_float)
    ))

    _M_SmartHome.TemperatureLimits = TemperatureLimits
    del TemperatureLimits

_M_SmartHome._t_TemperatureSensor = IcePy.defineValue('::SmartHome::TemperatureSensor', Ice.Value, -1, (), False, True, None, ())

if 'TemperatureSensorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureSensorPrx = Ice.createTempClass()
    class TemperatureSensorPrx(_M_SmartHome.DevicePrx):

        def getTemperature(self, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHome.TemperatureSensor._op_getTemperature.end(self, _r)

        def setTemperature(self, temperature, context=None):
            return _M_SmartHome.TemperatureSensor._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_SmartHome.TemperatureSensor._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TemperatureSensor._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_SmartHome.TemperatureSensor._op_setTemperature.end(self, _r)

        def getTemperatureSensorLimits(self, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperatureSensorLimits.invoke(self, ((), context))

        def getTemperatureSensorLimitsAsync(self, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperatureSensorLimits.invokeAsync(self, ((), context))

        def begin_getTemperatureSensorLimits(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperatureSensorLimits.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperatureSensorLimits(self, _r):
            return _M_SmartHome.TemperatureSensor._op_getTemperatureSensorLimits.end(self, _r)

        def setTemperatureLimits(self, temperatureLimits, context=None):
            return _M_SmartHome.TemperatureSensor._op_setTemperatureLimits.invoke(self, ((temperatureLimits, ), context))

        def setTemperatureLimitsAsync(self, temperatureLimits, context=None):
            return _M_SmartHome.TemperatureSensor._op_setTemperatureLimits.invokeAsync(self, ((temperatureLimits, ), context))

        def begin_setTemperatureLimits(self, temperatureLimits, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TemperatureSensor._op_setTemperatureLimits.begin(self, ((temperatureLimits, ), _response, _ex, _sent, context))

        def end_setTemperatureLimits(self, _r):
            return _M_SmartHome.TemperatureSensor._op_setTemperatureLimits.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.TemperatureSensorPrx.ice_checkedCast(proxy, '::SmartHome::TemperatureSensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.TemperatureSensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TemperatureSensor'
    _M_SmartHome._t_TemperatureSensorPrx = IcePy.defineProxy('::SmartHome::TemperatureSensor', TemperatureSensorPrx)

    _M_SmartHome.TemperatureSensorPrx = TemperatureSensorPrx
    del TemperatureSensorPrx

    _M_SmartHome.TemperatureSensor = Ice.createTempClass()
    class TemperatureSensor(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::TemperatureSensor')

        def ice_id(self, current=None):
            return '::SmartHome::TemperatureSensor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TemperatureSensor'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def getTemperatureSensorLimits(self, current=None):
            raise NotImplementedError("servant method 'getTemperatureSensorLimits' not implemented")

        def setTemperatureLimits(self, temperatureLimits, current=None):
            raise NotImplementedError("servant method 'setTemperatureLimits' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TemperatureSensorDisp)

        __repr__ = __str__

    _M_SmartHome._t_TemperatureSensorDisp = IcePy.defineClass('::SmartHome::TemperatureSensor', TemperatureSensor, (), None, (_M_SmartHome._t_DeviceDisp,))
    TemperatureSensor._ice_type = _M_SmartHome._t_TemperatureSensorDisp

    TemperatureSensor._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    TemperatureSensor._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_float, False, 0), (_M_SmartHome._t_TemperatureOutOfLimitException,))
    TemperatureSensor._op_getTemperatureSensorLimits = IcePy.Operation('getTemperatureSensorLimits', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_TemperatureLimits, False, 0), ())
    TemperatureSensor._op_setTemperatureLimits = IcePy.Operation('setTemperatureLimits', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_TemperatureLimits, False, 0),), (), ((), _M_SmartHome._t_TemperatureLimits, False, 0), (_M_SmartHome._t_TemperatureOutOfSupportedScaleException, _M_SmartHome._t_TemperatureLowerLimitIsGreaterThanUpperLimitException))

    _M_SmartHome.TemperatureSensor = TemperatureSensor
    del TemperatureSensor

if 'LackOfIceCubesException' not in _M_SmartHome.__dict__:
    _M_SmartHome.LackOfIceCubesException = Ice.createTempClass()
    class LackOfIceCubesException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::LackOfIceCubesException'

    _M_SmartHome._t_LackOfIceCubesException = IcePy.defineException('::SmartHome::LackOfIceCubesException', LackOfIceCubesException, (), False, None, ())
    LackOfIceCubesException._ice_type = _M_SmartHome._t_LackOfIceCubesException

    _M_SmartHome.LackOfIceCubesException = LackOfIceCubesException
    del LackOfIceCubesException

if 'QuantityOfIceCubesMustBeGraterThanZeroException' not in _M_SmartHome.__dict__:
    _M_SmartHome.QuantityOfIceCubesMustBeGraterThanZeroException = Ice.createTempClass()
    class QuantityOfIceCubesMustBeGraterThanZeroException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::QuantityOfIceCubesMustBeGraterThanZeroException'

    _M_SmartHome._t_QuantityOfIceCubesMustBeGraterThanZeroException = IcePy.defineException('::SmartHome::QuantityOfIceCubesMustBeGraterThanZeroException', QuantityOfIceCubesMustBeGraterThanZeroException, (), False, None, ())
    QuantityOfIceCubesMustBeGraterThanZeroException._ice_type = _M_SmartHome._t_QuantityOfIceCubesMustBeGraterThanZeroException

    _M_SmartHome.QuantityOfIceCubesMustBeGraterThanZeroException = QuantityOfIceCubesMustBeGraterThanZeroException
    del QuantityOfIceCubesMustBeGraterThanZeroException

if 'ProductUnit' not in _M_SmartHome.__dict__:
    _M_SmartHome.ProductUnit = Ice.createTempClass()
    class ProductUnit(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ProductUnit.ml = ProductUnit("ml", 0)
    ProductUnit.l = ProductUnit("l", 1)
    ProductUnit.g = ProductUnit("g", 2)
    ProductUnit.kg = ProductUnit("kg", 3)
    ProductUnit.notSpecified = ProductUnit("notSpecified", 4)
    ProductUnit._enumerators = { 0:ProductUnit.ml, 1:ProductUnit.l, 2:ProductUnit.g, 3:ProductUnit.kg, 4:ProductUnit.notSpecified }

    _M_SmartHome._t_ProductUnit = IcePy.defineEnum('::SmartHome::ProductUnit', ProductUnit, (), ProductUnit._enumerators)

    _M_SmartHome.ProductUnit = ProductUnit
    del ProductUnit

if 'Product' not in _M_SmartHome.__dict__:
    _M_SmartHome.Product = Ice.createTempClass()
    class Product(object):
        def __init__(self, name='', unit=_M_SmartHome.ProductUnit.ml, quantity=0):
            self.name = name
            self.unit = unit
            self.quantity = quantity

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.unit)
            _h = 5 * _h + Ice.getHash(self.quantity)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.Product):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.unit is None or other.unit is None:
                    if self.unit != other.unit:
                        return (-1 if self.unit is None else 1)
                else:
                    if self.unit < other.unit:
                        return -1
                    elif self.unit > other.unit:
                        return 1
                if self.quantity is None or other.quantity is None:
                    if self.quantity != other.quantity:
                        return (-1 if self.quantity is None else 1)
                else:
                    if self.quantity < other.quantity:
                        return -1
                    elif self.quantity > other.quantity:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Product)

        __repr__ = __str__

    _M_SmartHome._t_Product = IcePy.defineStruct('::SmartHome::Product', Product, (), (
        ('name', (), IcePy._t_string),
        ('unit', (), _M_SmartHome._t_ProductUnit),
        ('quantity', (), IcePy._t_int)
    ))

    _M_SmartHome.Product = Product
    del Product

if 'ShoppingListProductRecord' not in _M_SmartHome.__dict__:
    _M_SmartHome.ShoppingListProductRecord = Ice.createTempClass()
    class ShoppingListProductRecord(object):
        def __init__(self, id=0, product=Ice._struct_marker):
            self.id = id
            if product is Ice._struct_marker:
                self.product = _M_SmartHome.Product()
            else:
                self.product = product

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.product)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.ShoppingListProductRecord):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.product is None or other.product is None:
                    if self.product != other.product:
                        return (-1 if self.product is None else 1)
                else:
                    if self.product < other.product:
                        return -1
                    elif self.product > other.product:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ShoppingListProductRecord)

        __repr__ = __str__

    _M_SmartHome._t_ShoppingListProductRecord = IcePy.defineStruct('::SmartHome::ShoppingListProductRecord', ShoppingListProductRecord, (), (
        ('id', (), IcePy._t_int),
        ('product', (), _M_SmartHome._t_Product)
    ))

    _M_SmartHome.ShoppingListProductRecord = ShoppingListProductRecord
    del ShoppingListProductRecord

if '_t_ShoppingList' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_ShoppingList = IcePy.defineSequence('::SmartHome::ShoppingList', (), _M_SmartHome._t_ShoppingListProductRecord)

_M_SmartHome._t_Fridge = IcePy.defineValue('::SmartHome::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.FridgePrx = Ice.createTempClass()
    class FridgePrx(_M_SmartHome.TemperatureSensorPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.FridgePrx.ice_checkedCast(proxy, '::SmartHome::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'
    _M_SmartHome._t_FridgePrx = IcePy.defineProxy('::SmartHome::Fridge', FridgePrx)

    _M_SmartHome.FridgePrx = FridgePrx
    del FridgePrx

    _M_SmartHome.Fridge = Ice.createTempClass()
    class Fridge(_M_SmartHome.TemperatureSensor):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Fridge', '::SmartHome::TemperatureSensor')

        def ice_id(self, current=None):
            return '::SmartHome::Fridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_FridgeDisp)

        __repr__ = __str__

    _M_SmartHome._t_FridgeDisp = IcePy.defineClass('::SmartHome::Fridge', Fridge, (), None, (_M_SmartHome._t_TemperatureSensorDisp,))
    Fridge._ice_type = _M_SmartHome._t_FridgeDisp

    _M_SmartHome.Fridge = Fridge
    del Fridge

_M_SmartHome._t_FridgeWithShoppingList = IcePy.defineValue('::SmartHome::FridgeWithShoppingList', Ice.Value, -1, (), False, True, None, ())

if 'FridgeWithShoppingListPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.FridgeWithShoppingListPrx = Ice.createTempClass()
    class FridgeWithShoppingListPrx(_M_SmartHome.FridgePrx):

        def getShoppingList(self, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_getShoppingList.invoke(self, ((), context))

        def getShoppingListAsync(self, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_getShoppingList.invokeAsync(self, ((), context))

        def begin_getShoppingList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_getShoppingList.begin(self, ((), _response, _ex, _sent, context))

        def end_getShoppingList(self, _r):
            return _M_SmartHome.FridgeWithShoppingList._op_getShoppingList.end(self, _r)

        def addShoppingListProductRecord(self, Pproduct, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_addShoppingListProductRecord.invoke(self, ((Pproduct, ), context))

        def addShoppingListProductRecordAsync(self, Pproduct, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_addShoppingListProductRecord.invokeAsync(self, ((Pproduct, ), context))

        def begin_addShoppingListProductRecord(self, Pproduct, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_addShoppingListProductRecord.begin(self, ((Pproduct, ), _response, _ex, _sent, context))

        def end_addShoppingListProductRecord(self, _r):
            return _M_SmartHome.FridgeWithShoppingList._op_addShoppingListProductRecord.end(self, _r)

        def removeShoppingListProductRecord(self, idx, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_removeShoppingListProductRecord.invoke(self, ((idx, ), context))

        def removeShoppingListProductRecordAsync(self, idx, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_removeShoppingListProductRecord.invokeAsync(self, ((idx, ), context))

        def begin_removeShoppingListProductRecord(self, idx, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_removeShoppingListProductRecord.begin(self, ((idx, ), _response, _ex, _sent, context))

        def end_removeShoppingListProductRecord(self, _r):
            return _M_SmartHome.FridgeWithShoppingList._op_removeShoppingListProductRecord.end(self, _r)

        def clearShoppingList(self, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_clearShoppingList.invoke(self, ((), context))

        def clearShoppingListAsync(self, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_clearShoppingList.invokeAsync(self, ((), context))

        def begin_clearShoppingList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.FridgeWithShoppingList._op_clearShoppingList.begin(self, ((), _response, _ex, _sent, context))

        def end_clearShoppingList(self, _r):
            return _M_SmartHome.FridgeWithShoppingList._op_clearShoppingList.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.FridgeWithShoppingListPrx.ice_checkedCast(proxy, '::SmartHome::FridgeWithShoppingList', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.FridgeWithShoppingListPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::FridgeWithShoppingList'
    _M_SmartHome._t_FridgeWithShoppingListPrx = IcePy.defineProxy('::SmartHome::FridgeWithShoppingList', FridgeWithShoppingListPrx)

    _M_SmartHome.FridgeWithShoppingListPrx = FridgeWithShoppingListPrx
    del FridgeWithShoppingListPrx

    _M_SmartHome.FridgeWithShoppingList = Ice.createTempClass()
    class FridgeWithShoppingList(_M_SmartHome.Fridge):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Fridge', '::SmartHome::FridgeWithShoppingList', '::SmartHome::TemperatureSensor')

        def ice_id(self, current=None):
            return '::SmartHome::FridgeWithShoppingList'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::FridgeWithShoppingList'

        def getShoppingList(self, current=None):
            raise NotImplementedError("servant method 'getShoppingList' not implemented")

        def addShoppingListProductRecord(self, Pproduct, current=None):
            raise NotImplementedError("servant method 'addShoppingListProductRecord' not implemented")

        def removeShoppingListProductRecord(self, idx, current=None):
            raise NotImplementedError("servant method 'removeShoppingListProductRecord' not implemented")

        def clearShoppingList(self, current=None):
            raise NotImplementedError("servant method 'clearShoppingList' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_FridgeWithShoppingListDisp)

        __repr__ = __str__

    _M_SmartHome._t_FridgeWithShoppingListDisp = IcePy.defineClass('::SmartHome::FridgeWithShoppingList', FridgeWithShoppingList, (), None, (_M_SmartHome._t_FridgeDisp,))
    FridgeWithShoppingList._ice_type = _M_SmartHome._t_FridgeWithShoppingListDisp

    FridgeWithShoppingList._op_getShoppingList = IcePy.Operation('getShoppingList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_ShoppingList, False, 0), (_M_SmartHome._t_DeviceIsOffException,))
    FridgeWithShoppingList._op_addShoppingListProductRecord = IcePy.Operation('addShoppingListProductRecord', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_Product, False, 0),), (), ((), _M_SmartHome._t_ShoppingListProductRecord, False, 0), (_M_SmartHome._t_DeviceIsOffException,))
    FridgeWithShoppingList._op_removeShoppingListProductRecord = IcePy.Operation('removeShoppingListProductRecord', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_SmartHome._t_ShoppingListProductRecord, False, 0), (_M_SmartHome._t_IndexOutOfRangeException, _M_SmartHome._t_DeviceIsOffException))
    FridgeWithShoppingList._op_clearShoppingList = IcePy.Operation('clearShoppingList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_ShoppingList, False, 0), (_M_SmartHome._t_DeviceIsOffException,))

    _M_SmartHome.FridgeWithShoppingList = FridgeWithShoppingList
    del FridgeWithShoppingList

_M_SmartHome._t_FridgeWithIce = IcePy.defineValue('::SmartHome::FridgeWithIce', Ice.Value, -1, (), False, True, None, ())

if 'FridgeWithIcePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.FridgeWithIcePrx = Ice.createTempClass()
    class FridgeWithIcePrx(_M_SmartHome.FridgePrx):

        def getCubesMakerCapacity(self, context=None):
            return _M_SmartHome.FridgeWithIce._op_getCubesMakerCapacity.invoke(self, ((), context))

        def getCubesMakerCapacityAsync(self, context=None):
            return _M_SmartHome.FridgeWithIce._op_getCubesMakerCapacity.invokeAsync(self, ((), context))

        def begin_getCubesMakerCapacity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.FridgeWithIce._op_getCubesMakerCapacity.begin(self, ((), _response, _ex, _sent, context))

        def end_getCubesMakerCapacity(self, _r):
            return _M_SmartHome.FridgeWithIce._op_getCubesMakerCapacity.end(self, _r)

        def getCubesQuantity(self, context=None):
            return _M_SmartHome.FridgeWithIce._op_getCubesQuantity.invoke(self, ((), context))

        def getCubesQuantityAsync(self, context=None):
            return _M_SmartHome.FridgeWithIce._op_getCubesQuantity.invokeAsync(self, ((), context))

        def begin_getCubesQuantity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.FridgeWithIce._op_getCubesQuantity.begin(self, ((), _response, _ex, _sent, context))

        def end_getCubesQuantity(self, _r):
            return _M_SmartHome.FridgeWithIce._op_getCubesQuantity.end(self, _r)

        def takeIceCubes(self, cubesQuantity, context=None):
            return _M_SmartHome.FridgeWithIce._op_takeIceCubes.invoke(self, ((cubesQuantity, ), context))

        def takeIceCubesAsync(self, cubesQuantity, context=None):
            return _M_SmartHome.FridgeWithIce._op_takeIceCubes.invokeAsync(self, ((cubesQuantity, ), context))

        def begin_takeIceCubes(self, cubesQuantity, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.FridgeWithIce._op_takeIceCubes.begin(self, ((cubesQuantity, ), _response, _ex, _sent, context))

        def end_takeIceCubes(self, _r):
            return _M_SmartHome.FridgeWithIce._op_takeIceCubes.end(self, _r)

        def makeIceCubes(self, cubesQuantity, context=None):
            return _M_SmartHome.FridgeWithIce._op_makeIceCubes.invoke(self, ((cubesQuantity, ), context))

        def makeIceCubesAsync(self, cubesQuantity, context=None):
            return _M_SmartHome.FridgeWithIce._op_makeIceCubes.invokeAsync(self, ((cubesQuantity, ), context))

        def begin_makeIceCubes(self, cubesQuantity, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.FridgeWithIce._op_makeIceCubes.begin(self, ((cubesQuantity, ), _response, _ex, _sent, context))

        def end_makeIceCubes(self, _r):
            return _M_SmartHome.FridgeWithIce._op_makeIceCubes.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.FridgeWithIcePrx.ice_checkedCast(proxy, '::SmartHome::FridgeWithIce', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.FridgeWithIcePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::FridgeWithIce'
    _M_SmartHome._t_FridgeWithIcePrx = IcePy.defineProxy('::SmartHome::FridgeWithIce', FridgeWithIcePrx)

    _M_SmartHome.FridgeWithIcePrx = FridgeWithIcePrx
    del FridgeWithIcePrx

    _M_SmartHome.FridgeWithIce = Ice.createTempClass()
    class FridgeWithIce(_M_SmartHome.Fridge):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Fridge', '::SmartHome::FridgeWithIce', '::SmartHome::TemperatureSensor')

        def ice_id(self, current=None):
            return '::SmartHome::FridgeWithIce'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::FridgeWithIce'

        def getCubesMakerCapacity(self, current=None):
            raise NotImplementedError("servant method 'getCubesMakerCapacity' not implemented")

        def getCubesQuantity(self, current=None):
            raise NotImplementedError("servant method 'getCubesQuantity' not implemented")

        def takeIceCubes(self, cubesQuantity, current=None):
            raise NotImplementedError("servant method 'takeIceCubes' not implemented")

        def makeIceCubes(self, cubesQuantity, current=None):
            raise NotImplementedError("servant method 'makeIceCubes' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_FridgeWithIceDisp)

        __repr__ = __str__

    _M_SmartHome._t_FridgeWithIceDisp = IcePy.defineClass('::SmartHome::FridgeWithIce', FridgeWithIce, (), None, (_M_SmartHome._t_FridgeDisp,))
    FridgeWithIce._ice_type = _M_SmartHome._t_FridgeWithIceDisp

    FridgeWithIce._op_getCubesMakerCapacity = IcePy.Operation('getCubesMakerCapacity', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    FridgeWithIce._op_getCubesQuantity = IcePy.Operation('getCubesQuantity', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_SmartHome._t_DeviceIsOffException,))
    FridgeWithIce._op_takeIceCubes = IcePy.Operation('takeIceCubes', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_SmartHome._t_LackOfIceCubesException, _M_SmartHome._t_QuantityOfIceCubesMustBeGraterThanZeroException, _M_SmartHome._t_DeviceIsOffException))
    FridgeWithIce._op_makeIceCubes = IcePy.Operation('makeIceCubes', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_SmartHome._t_QuantityOfIceCubesMustBeGraterThanZeroException, _M_SmartHome._t_DeviceIsOffException))

    _M_SmartHome.FridgeWithIce = FridgeWithIce
    del FridgeWithIce

# End of module SmartHome
